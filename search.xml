<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用JMeter测试服务器基准性能</title>
    <url>/2021/09/18/%E4%BD%BF%E7%94%A8JMeter%E6%B5%8B%E8%AF%95%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%BA%E5%87%86%E6%80%A7%E8%83%BD/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>打算使用JMeter测试一台运行一个简单web server的服务器的基准性能，并尝试对服务器内核进行调优。</p>
<p>为了客观一点，计划使用java、go、nodejs、python等4种语言编写的简单web服务作测试。所谓简单web服务，就是那种不涉及数据库操纵、只是进行简单处理并返回响应体的服务。除了对Linux服务器进行优化，还涉及对服务进行优化，最终测试一台8C16GB的标准Linux虚拟机的基准性能到底如何。</p>
<h2 id="准备被测环境"><a href="#准备被测环境" class="headerlink" title="准备被测环境"></a>准备被测环境</h2><p>准备两台负载机器用于产生压力，另外准备一台服务器作为被测机器。三台机器都位于同一台物理机器上，每台机器配置都是8C16GB的设置。</p>
<p>我们是使用JMeter执行分布式测试，所以自然在两台测试机器上安装好JMeter，并配置好分布式执行环境。其中一台机器即作为主控节点也作为工作节点。具体怎么配置分布式环境见另外一篇文章<a href="https://blog.csdn.net/ceo158/article/details/120357653">搭建JMeter分布式测试环境</a>。在被测服务器上安装必备的基础软件，包括jdk、nodejs、python、go等，具体安装方法网上自查，难以面面俱到了。</p>
<h2 id="准备被测服务"><a href="#准备被测服务" class="headerlink" title="准备被测服务"></a>准备被测服务</h2><h3 id="使用nodejs版服务"><a href="#使用nodejs版服务" class="headerlink" title="使用nodejs版服务"></a>使用nodejs版服务</h3><p>首先尝试使用一个开源的nodejs服务<a href="https://github.com/typicode/json-server">json-server</a>做测试。为了安装该服务，需要先安装node和npm。</p>
<p>完成node和npm安装后，安装json-server：<code>npm install -g json-server</code>。随后创建一个db.json文件，编辑其内容如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;posts&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;hello&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;profile&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;typicode&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后执行<code>json-server --watch db.json --host 0.0.0.0 --port 3000</code>启动json-server服务，作为我们的被测服务。</p>
<h3 id="使用ab对json-server服务执行测试"><a href="#使用ab对json-server服务执行测试" class="headerlink" title="使用ab对json-server服务执行测试"></a>使用ab对json-server服务执行测试</h3><p>使用apache benchmark（简称ab）执行最基础的测试，用来作为与JMeter分布式测试的效果的对比。有对比才有高下之分对吧。</p>
<p>在CentOS上安装ab，只需要一行命令：<code>yum install /usr/bin/ab</code>。安装好以后在命令行执行<code>ab</code>验证是否成功。</p>
<p>要测试的url是<code>http://192.168.1.182:3000/posts/1</code>。</p>
<p>初步设置ab测试的并发数为3000，请求总数为30万，即每个用户发送100个请求。</p>
<p>第一轮测试结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hadoop0 ~]<span class="comment"># ab -c 3000 -n 300000 http://192.168.1.182:3000/posts/1</span></span><br><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1430300 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking hadoop2 (be patient)</span><br><span class="line">socket: Too many open files (24)</span><br></pre></td></tr></table></figure>
<p>上面输出的<code>Too many open files</code>错误说明负载机器没有优化，所以ab不能启动很多并发。根据得上面信息，修改允许打开的文件句柄数。通过修改/etc/security/limits.conf中关于用户打开文件数的软限制或硬限制，或执行命令<code>ulimit -n 1000000</code>，将其暂修改为1000000，可以满足我们的测试需要了。通过修改文件达到的效果是永久性的；执行命令修改的效果是临时性的，机器重启后会恢复为初始值。</p>
<p>第二轮测试结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hadoop0 ~]<span class="comment"># ab -c 3000 -n 300000 http://192.168.1.182:3000/posts/1</span></span><br><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1430300 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking hadoop2 (be patient)</span><br><span class="line">Completed 30000 requests</span><br><span class="line">Completed 60000 requests</span><br><span class="line">apr_socket_recv: Connection timed out (110)</span><br><span class="line">Total of 75158 requests completed</span><br></pre></td></tr></table></figure>
<p>通过分析上述输出，之前的错误消失了，但还是发现有新的错误出现，一波三折啊。这次的错误是<code>apr_socket_recv: Connection timed out</code>，看起来是连接出现了超时。所以到底是服务端的问题还是客户端的问题？首先检查被测服务器上的json-sever进程，没有出现问题，可以正常响应。通过搜索发现，该错误可能是由于个别连接出错而导致ab进程中止，但其实性能测试中出现个别错误是比较正常的，只要在可接受的范围内。所以，完全可以继续执行测试。通过给ab命令加<code>-r</code>选型消除这个错误，修复后的测试命令是<code>ab -r -c 3000 -n 300000 http://hadoop2:3000/posts/1</code>。</p>
<p>第三轮测试结果（添加-r选项后再执行的结果）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Requests per second:    858.24 [<span class="comment">#/sec] (mean)</span></span><br><span class="line">Time per request:       3495.540 [ms] (mean)</span><br></pre></td></tr></table></figure>

<p>输出比较多，就不全部贴出，只贴关键的两条信息。一条是每秒处理请求数，所谓RPS，另外一个是每个请求的响应时间，达到了3.5秒。看起来性能比较低。而且通过观察服务器的资源使用情况，负载机器的资源使用率都没有超过10%（6C16GB配置）。所以看起来，应用服务器可能有大问题。</p>
<p>所以，决定对json-server及所在服务器进行调优。</p>
<h3 id="使用JMeter执行单节点模式测试"><a href="#使用JMeter执行单节点模式测试" class="headerlink" title="使用JMeter执行单节点模式测试"></a>使用JMeter执行单节点模式测试</h3><p>先使用单节点模式测试。再单节点压力不够时，再使用分布式测试模式。</p>
<p>首先在JMeter脚本中设置并发用户数和循环次数。</p>
]]></content>
      <categories>
        <category>jmeter</category>
      </categories>
      <tags>
        <tag>jmeter</tag>
        <tag>性能测试</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建JMeter分布式测试环境</title>
    <url>/2021/09/16/%E6%90%AD%E5%BB%BAJMeter%E5%88%86%E5%B8%83%E5%BC%8F%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h2 id="分布式测试概述"><a href="#分布式测试概述" class="headerlink" title="分布式测试概述"></a>分布式测试概述</h2><p>现在我们来了解如何使用多台机器来执行压力测试，也就是所谓的分布式测试。当我们模拟大量的并发虚拟用户时，比如我们要起10万、100万甚至更多的并发用户时，一台负载机器可能就满足不了我们需要的用户量。此时，就需要使用多台主机搭建一套多节点的分布式性能测试环境，使得我们可以执行大规模并发测试。这是执行分布式性能测试的基本原因。当然可能还有其他一些场景，比如我们可以建立一套测试云平台，也需要搭建分布式测试环境，来满足多租户需求。</p>
<p>在搭建JMeter分布式测试环境和利用该环境执行性能或压力测试时，首次需要执行的操作包括：</p>
<ol>
<li>准备测试环境，主要是准备用于运行JMeter进程的机器，可以是Windows机器，也可以是Unix类机器包括Linux操作系统的机器。包括安装部署JMeter及依赖的Java环境。第一次准备之后，后面的测试就可以复用这些环境了</li>
<li>设置分布式环境没台机器上的JMeter节点的配置</li>
<li>准备要运行的测试脚本。可在JMeter的GUI界面上，先编好测试计划，然后下载到分布式环境中的主控制节点上。此处要主次使用的JMeter的版本要匹配，否则可能产生莫名错误</li>
<li>启动分布式测试</li>
<li>查看和分析测试结果</li>
<li>可能需要进行一些问题处理或服务器调优。如果压力不够，可能还需要增加机器，此时可以参考步骤1中的操作了</li>
</ol>
<h2 id="准备测试环境"><a href="#准备测试环境" class="headerlink" title="准备测试环境"></a>准备测试环境</h2><p>和其他分布式系统类似，使用JMeter搭建分布式测试系统，结构也基本是一主多从的架构，包括一台主控制节点，多个工作节点。</p>
<p><img src="./imgs/distributed-names.svg" alt="dirstributed-nodes"></p>
<p>在开始执行分布式测试之前，首先要准备负载机器。作为实践案例，我们使用三台Linux机器构建一个分布式测试环境，构建一主二从的结构。在执行测试时，由JMeter 主控制器节点（主节点）在多个工作节点（从节点）上启动测试。使用<code>ifconfig</code>命令查看机器的ip地址，记录IP地址备用。本例使用的三台机器ip地址分别为<br>192.168.1.180、192.168.1.181、192.168.1.182，其中将192.168.1.180作为主节点。</p>
<p>首先对三台服务器执行下述检查：</p>
<ul>
<li>系统上的防火墙已关闭或打开了正确的端口。在实验环境下，可以关闭防火墙；在正式的测试环境下，建议不要关闭防火墙，打开相关的端口即可</li>
<li>所有负载机器都在同一个子网上，确保可以互通</li>
<li>确保三台负载机可以访问被测服务器</li>
<li>确保在所有系统上使用相同版本的 JMeter 和 Java。混合版本将无法正常工作</li>
<li>已经为 RMI 设置了 SSL或禁用SSL。参考<a href="../5%20remote_testing/5.1%20JMeter%E8%BF%9C%E7%A8%8B%E6%B5%8B%E8%AF%95.md">远程测试</a>。</li>
</ul>
<h2 id="设置分布式环境"><a href="#设置分布式环境" class="headerlink" title="设置分布式环境"></a>设置分布式环境</h2><h3 id="设置主控节点"><a href="#设置主控节点" class="headerlink" title="设置主控节点"></a>设置主控节点</h3><p>完成上述测试环境准备和检查工作后，需要在主节点上进行如下设置。主控节点有时成为client节点，因为相对工作节点来说，它就是一个client，而工作节点是server节点。</p>
<p>在作为控制台的控制器节点（192.168.1.180）上，在jmeter/bin目录打开jmeter.properties进行编辑。</p>
<p>首先找到remote_hosts，设置为<code>remote_hosts=192.168.1.181,192.168.1.182</code>，其次，设置client.rmi.localport的值，表示控制节点将使用这个指定的端口与工作节点通信。其他设置使用默认值。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">remote_hosts</span>=<span class="string">192.168.1.181,192.168.1.182</span></span><br><span class="line"><span class="meta">client.rmi.localport</span>=<span class="string">5000</span></span><br><span class="line"><span class="meta">server.rmi.ssl.disable</span>=<span class="string">true #设为true表示rmi不使用ssl进行通信</span></span><br></pre></td></tr></table></figure>

<p>JMeter分布式环境中，主控节点和工作节点之间通过RMI进行服务调用。在上面配置中，主控节点使用5000与工作节点通信，如果打开了防火墙，那么要打开5000端口。</p>
<blockquote>
<p>特别说明一下server.rmi.localport、server_ports、client.rmi.localport这几个相似配置的关系和区别：<br>server_ports指Java RMI注册表的端口，只需在工作节点配置。server.rmi.localport为工作节点使用的RMI本地端口，client.rmi.localport为主控节点使用的RMI本地端口，如果不设置，则JMeter使用动态端口互相通信。在开启防火墙的情况，需要指定端口，避免随机动态端口不能访问。</p>
</blockquote>
<p>另外，从 JMeter 4.0 开始，RMI 的默认传输机制将使用 SSL。本例为了简便期间，关闭使用SSL的机制。如果希望继续使用SSL，需要密钥和证书才能工作，参考<a href="../5%20remote_testing/5.1%20JMeter%E8%BF%9C%E7%A8%8B%E6%B5%8B%E8%AF%95.md">JMeter远程测试</a>中关于SSL的设置。</p>
<h3 id="设置工作节点"><a href="#设置工作节点" class="headerlink" title="设置工作节点"></a>设置工作节点</h3><p>正如上面说的，工作节点在JMeter分布式测试环境中，也称为server节点（服务节点）。不过注意这个服务节点与被测服务不同，要区分开。</p>
<p>在jmeter/bin目录打开jmeter.properties进行编辑。在工作节点上设置server.rmi.localport的值，表示工作节点将使用这个指定的端口与控制节点通信：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.rmi.localport</span>=<span class="string">4000</span></span><br><span class="line"><span class="meta">server.rmi.ssl.disable</span>=<span class="string">true #设为true表示rmi不使用ssl进行通信</span></span><br></pre></td></tr></table></figure>

<h2 id="执行分布式测试"><a href="#执行分布式测试" class="headerlink" title="执行分布式测试"></a>执行分布式测试</h2><p>一旦确定系统准备就绪，就可以设置远程测试了。</p>
<h3 id="启动工作节点"><a href="#启动工作节点" class="headerlink" title="启动工作节点"></a>启动工作节点</h3><p>在工作节点上（192.168.1.181和192.168.1.182），转到jmeter/bin目录并执行 jmeter-server（在 windows 上为jmeter-server.bat）。</p>
<p>运行成功的输出如下，表明控制节点可以开始调用该工作节点执行分布式测试了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@192.168.1.181 bin]<span class="comment"># ./jmeter-server</span></span><br><span class="line">Using <span class="built_in">local</span> port: 4000</span><br><span class="line">Created remote object: UnicastServerRef2 [liveRef: [endpoint:[192.168.1.181:4000](<span class="built_in">local</span>),objID:[7eec802e:17beeece6e9:-7fff, -4396200611540390478]]]</span><br></pre></td></tr></table></figure>

<p>如果没有看到此消息，则表示jmeter-server未正确启动。相关问题的解决可转到本文后面的<a href="#%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3">问题及解决</a>一章。</p>
<h3 id="启动分布式测试"><a href="#启动分布式测试" class="headerlink" title="启动分布式测试"></a>启动分布式测试</h3><p>分布式性能测试中，一定要以非GUI的方式启动测试。因此，接下来只介绍以非GUI方式运行jmeter执行分布式测试。</p>
<p>假设我们需要执行的测试计划脚本是test_on_linux.jmx，并希望把测试日志存储到test.jtl中，那么只需要把test_on_linux.jmx部署到主控节点，无需部署到工作节点。在执行测试时，主控节点会自动分发测试任务给工作节点。</p>
<p>下面开始正式启动测试。在控制节点（即192.168.1.180这台机器）上的jmeter/bin目录下执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./jmeter -n -t test_on_linux.jmx -l test_queryweb.jtl -R192.168.1.181,192.168.1.182</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参数说明：</p>
<p>-n表示以nogui方式运行测试计划</p>
<p>-t表示测试计划，后面跟测试计划名称</p>
<p>-l表示测试结果，后面跟测试结果文件名称</p>
<p>-R表示JMeter代理（工作节点），后面跟代理所在ip地址。注意，上面的命令只在ip1和ip2上运行测试，而当前机器作为主控台负责收集数据。</p>
</blockquote>
<p>如果没有错误，则打印类似如下信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hadoop0 bin]<span class="comment"># ./jmeter -n -t test_on_linux.jmx -l test_queryweb.jtl -R192.168.1.181,192.168.1.182</span></span><br><span class="line">Creating summariser &lt;summary&gt;</span><br><span class="line">Created the tree successfully using test_on_linux.jmx</span><br><span class="line">Configuring remote engine: 192.168.1.181</span><br><span class="line">Configuring remote engine: 192.168.1.182</span><br><span class="line">Starting distributed <span class="built_in">test</span> with remote engines: [192.168.1.181, 192.168.1.182] @ Thu Sep 16 22:31:18 CST 2021 (1631802678465)</span><br><span class="line">Remote engines have been started:[192.168.1.181, 192.168.1.182]</span><br><span class="line">Waiting <span class="keyword">for</span> possible Shutdown/StopTestNow/HeapDump/ThreadDump message on port 4445</span><br><span class="line">summary =    100 <span class="keyword">in</span> 00:00:01 =   71.2/s Avg:    41 Min:    13 Max:   146 Err:     0 (0.00%)</span><br><span class="line">Tidying up remote @ Thu Sep 16 22:31:22 CST 2021 (1631802682161)</span><br><span class="line">... end of run</span><br></pre></td></tr></table></figure>

<p>此时查看两个工作节点，可以看到都会打印类似下述信息，说明正在执行主控节点启动的分布式测试任务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Starting the test on host 192.168.1.181 @ Thu Sep 16 22:31:20 CST 2021 (1631802680315)</span><br><span class="line">Finished the test on host 192.168.1.181 @ Thu Sep 16 22:31:22 CST 2021 (1631802682437)</span><br></pre></td></tr></table></figure>

<p>如希望以后台形式运行测试，则执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nohup ./jmeter -n -t test_on_linux.jmx -l test_queryweb.jtl &amp; &gt; nohup.log</span><br></pre></td></tr></table></figure>

<h2 id="查看测试结果"><a href="#查看测试结果" class="headerlink" title="查看测试结果"></a>查看测试结果</h2><p>上述执行命令的输出信息中的<code>end of run</code>表示测试计划已经运行完毕。可在运行JMeter打开测试结果文件test_queryweb.jtl。</p>
<p>下面是在JMeter的GUI（图形化界面)上查看执行结果的步骤：</p>
<ol>
<li>step1：为测试计划添加查看结果树</li>
</ol>
<p>在打开的JMeter图形窗口，并新建或打开一个测试计划，为该计划添加“结果查看树”和“聚合报告”。</p>
<ol start="2">
<li>step2：打开jtl文件，以可视化方式查看测试结果</li>
</ol>
<p>打开查看结果树，点击“浏览”按钮打开测试结果文件test_queryweb.jtl。同理，打开聚合报告，点击“浏览”按钮打开测试结果文件test_queryweb.jtl生成聚合报告。</p>
<h2 id="问题及解决"><a href="#问题及解决" class="headerlink" title="问题及解决"></a>问题及解决</h2><h3 id="如果测试脚本使用了csv等文件，必须放到工作节点上，否则会报错误"><a href="#如果测试脚本使用了csv等文件，必须放到工作节点上，否则会报错误" class="headerlink" title="如果测试脚本使用了csv等文件，必须放到工作节点上，否则会报错误"></a>如果测试脚本使用了csv等文件，必须放到工作节点上，否则会报错误</h3><p>错误信息示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2016/07/29 15:44:01 INFO  - jmeter.threads.JMeterThread: Thread started: 线程组 1-1</span><br><span class="line">2016/07/29 15:44:01 INFO  - jmeter.services.FileServer: Stored: csvRelation-vip.csv</span><br><span class="line">2016/07/29 15:44:01 ERROR - jmeter.config.CSVDataSet: java.io.FileNotFoundException: ./csvRelation-vip.csv (没有那个文件或目录)</span><br><span class="line">2016/07/29 15:44:01 INFO  - jmeter.threads.JMeterThread: Stop Thread seen: org.apache.jorphan.util.JMeterStopThreadException: End of file detected</span><br></pre></td></tr></table></figure>

<h3 id="运行时错误-Error-in-NonGUIDriver-java-lang-NullPointerException"><a href="#运行时错误-Error-in-NonGUIDriver-java-lang-NullPointerException" class="headerlink" title="运行时错误: Error in NonGUIDriver java.lang.NullPointerException"></a>运行时错误: Error in NonGUIDriver java.lang.NullPointerException</h3><p>产生该错误的原因，目前就我所知，有两种情况：</p>
<p>情况1，低版本的JMeter运行高版本的测试计划（测试计划是在高版本的JMeter上编制的）。解决方法：使用相同或更高版本JMeter运行该计划。</p>
<p>情况2，使用第三方插件生成的测试计划，运行在没有该第三方插件的JMeter上。解决方法：在JMeter上安装插件或重新生成不包含插件的测试计划。</p>
<h3 id="运行时错误-controller连接远程agent失败：Connection-refused-to-host"><a href="#运行时错误-controller连接远程agent失败：Connection-refused-to-host" class="headerlink" title="运行时错误: controller连接远程agent失败：Connection refused to host"></a>运行时错误: controller连接远程agent失败：Connection refused to host</h3><p>详细日志：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Failure connecting to remote host: 10.15.144.172 java.rmi.ConnectException: Connection refused to host: 10.15.144.172; nested exception is:</span><br><span class="line">    java.net.ConnectException: 拒绝连接</span><br><span class="line">Failed to configure 10.15.144.172</span><br><span class="line">Configuring remote engine for 10.15.144.173</span><br><span class="line">Using remote object: UnicastRef [liveRef: [endpoint:[10.15.144.173:42973](remote),objID:[-7fc64e11:1564b9635f8:-7fff, -3234805376461024374]]]</span><br><span class="line">Error in NonGUIDriver java.lang.IllegalArgumentException: The following remote engines could not be configured:[10.15.107.159, 10.15.107.241, 10.15.107.110, 10.15.107.116, 10.15.107.117, 10.15.144.85, 10.15.144.171, 10.15.144.172]</span><br></pre></td></tr></table></figure>

<p>分析原因。</p>
<ol>
<li>首先查看是否有开防火墙，如果开了请关闭。或打开相关端口。</li>
<li>然后查看jmeter-server进程是否启起来了。这次比较大意，只是把jmeter文件拷到目标机器上了，但是没有安装java环境，所以才导致jmeter启动失败。</li>
</ol>
<h3 id="防火墙问题"><a href="#防火墙问题" class="headerlink" title="防火墙问题"></a>防火墙问题</h3><p>在某些情况下，防火墙可能仍会阻止 RMI 流量。<br>在负载测试期间应停止防病毒软件，因为它会严重影响导致错误结果的时间。<br>对于Windows负载机，防火墙需要从 windows 服务中停止，或者至少需要打开一些端口。<br>在 Linux 上，iptables 可能默认是打开的。可停止 Linux 防火墙或确保已打开正确的端口。</p>
]]></content>
      <categories>
        <category>jmeter</category>
        <category>test</category>
      </categories>
      <tags>
        <tag>jmeter</tag>
        <tag>distributed</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven常用仓库及配置多仓库</title>
    <url>/2021/09/09/Maven%E5%B8%B8%E7%94%A8%E4%BB%93%E5%BA%93%E5%8F%8A%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h2 id="常用repo列表"><a href="#常用repo列表" class="headerlink" title="常用repo列表"></a>常用repo列表</h2><p>首先介绍一个搜索jar包的常用网址：<a href="http://mvnrepository.com/">http://mvnrepository.com/</a>。</p>
<p>如果想知道哪些库比较流行，可以在 <a href="https://mvnrepository.com/repos/central">https://mvnrepository.com/repos/central</a> 看到。截止2021年9月，最流行的仍然是central这个库。</p>
<h3 id="center"><a href="#center" class="headerlink" title="center"></a>center</h3><p>repo配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- This should be at top, it makes maven try the central repo</span></span><br><span class="line"><span class="comment">        first and then others and hence faster dep resolution --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Maven Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo1.maven.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="jcenter"><a href="#jcenter" class="headerlink" title="jcenter"></a>jcenter</h3><p>repo配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>jcenter<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://jcenter.bintray.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="spring-plugins"><a href="#spring-plugins" class="headerlink" title="spring plugins"></a>spring plugins</h3><p>url:<a href="https://repo.spring.io/plugins-release/">https://repo.spring.io/plugins-release/</a></p>
<h3 id="sonartype"><a href="#sonartype" class="headerlink" title="sonartype"></a>sonartype</h3><p>排名靠前。大名鼎鼎的nexus就是sonartype公司的产品。</p>
<p>url：<a href="https://oss.sonatype.org/content/repositories/releases/">https://oss.sonatype.org/content/repositories/releases/</a></p>
<h3 id="spring的几个仓库"><a href="#spring的几个仓库" class="headerlink" title="spring的几个仓库"></a>spring的几个仓库</h3><p>repo配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>libs-milestone<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/libs-milestone/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>libs-release<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/libs-release/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="aliyun的仓库"><a href="#aliyun的仓库" class="headerlink" title="aliyun的仓库"></a>aliyun的仓库</h3><p>aliyun的仓库搭配上面几个库一起使用，就比较全面了，不大会出现找不到jar的问题。可以把aliyun的放到最前面，如果aliyun有就不会找后面的仓库，如果没有再去其他仓库找，这样可以保证速度最快。</p>
<p>repo配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">snapshots</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>ali-central<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/central<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>alispringplugin<span class="tag">&lt;/<span class="name">id</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-plugin<span class="tag">&lt;/<span class="name">name</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/spring-plugin<span class="tag">&lt;/<span class="name">url</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span>    </span><br><span class="line">      <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="maven配置多仓库"><a href="#maven配置多仓库" class="headerlink" title="maven配置多仓库"></a>maven配置多仓库</h2><p>经过上面的介绍，相信大家对于应该配置哪些仓库基本有所了解了。当然很多都是经验之谈，基于仓库的流行程度和速度快慢来选择的，没有详细介绍为什么要配置这些仓库，可能在遇到一些特殊的依赖包的时候，恰巧在上述仓库中都没有。那么你就需要把那个包的仓库的配置加到全局的settings.xml中了。</p>
<p>完整的settingx.xml配置如下，可以复制替代你原来默认的配置了（建议原来的备份一份）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.1.0 http://maven.apache.org/xsd/settings-1.1.0.xsd&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.1.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这个地方一般用于记录私服的用户密码之类信息，公库一般不需要这个配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>search-aliyun-first<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- aliyun repo--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">snapshots</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>ali-central<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/central<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>alispringplugin<span class="tag">&lt;/<span class="name">id</span>&gt;</span>    </span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-plugin<span class="tag">&lt;/<span class="name">name</span>&gt;</span>    </span><br><span class="line">          <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/spring-plugin<span class="tag">&lt;/<span class="name">url</span>&gt;</span>    </span><br><span class="line">          <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span>    </span><br><span class="line">              <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span>    </span><br><span class="line">          <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- maven central--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- This should be at top, it makes maven try the central repo</span></span><br><span class="line"><span class="comment">                first and then others and hence faster dep resolution --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Maven Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo1.maven.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- jcenter repo--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>jcenter<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://jcenter.bintray.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- spring repo--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>libs-milestone<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/libs-milestone/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>libs-release<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/libs-release/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- sonartype --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>sonartype-release<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">snapshots</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/releases<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">snapshots</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-plugins-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/plugins-release<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>search-aliyun-first<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>因为这些配置很难记住，所以记录了一下。希望有所帮助。</p>
]]></content>
      <categories>
        <category>maven</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>maven</tag>
        <tag>build</tag>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>调试JMeter5源码</title>
    <url>/2021/09/08/%E8%B0%83%E8%AF%95JMeter5%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<h1 id="JMeter源码的开发调试"><a href="#JMeter源码的开发调试" class="headerlink" title="JMeter源码的开发调试"></a>JMeter源码的开发调试</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本文编译这部分内容基本来源于网上。debug相关内容为本人根据实际情况整理。</p>
<p>JMeter5.2开始，使用gradle代替了原来ant，所以基于源码的本地环境搭建略有不同。JMeter 5.4.1使用的gradle文件不是build.gradle文件，而是build.gradle.kts。</p>
<h2 id="所需环境"><a href="#所需环境" class="headerlink" title="所需环境"></a>所需环境</h2><ul>
<li>JDK 8 +</li>
<li>JMeter 源码（本例使用的是5.4.1版本）</li>
<li>IntelliJ IDEA / Eclipse：本例使用IntelliJ IDEA CE 2020.3来构建本地开发环境（IDEA版本需要&gt;=2018.3.1）</li>
</ul>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>下面是在IDEA打开JMeter工程的步骤说明。</p>
<ol>
<li><p>启动idea，点击File -&gt; open，选中jmeter源码目录下build.gradle.kts</p>
</li>
<li><p>选择“Open as Project”</p>
</li>
<li><p>确保“Create separate module per source set” 和 “Use default gradle wrapper”选中，然后点击ok。（这两项不一定会有，可能和IDEA版本有关）</p>
</li>
</ol>
<p>随后idea会自动开始下载JMeter所需依赖，等待执行完成。</p>
<p><strong>注意 这里不要对Gradle设置阿里云镜像，否则会出现依赖加载不成功，在checksum时，会有部分依赖报错，开始前建议暂时取消Gradle的镜像。</strong></p>
<blockquote>
<p>为了不使用ali的gradle仓库，我把~/.gradle下的init.gradle（使用了ali的gradle库）重命名为init.gradle.bak了，这样gradle在运行的时候不再使用ali的库。</p>
</blockquote>
<p>依赖下载完成后，所需的依赖是在gradle的cache目录下，我们需要执行命令打包构建，将所需的依赖复制一份到jmeter源码目录的lib目录下。在Terminal中执行（gradle需要先配置环境变量）<code>gradlew runGui</code>。或在gradle任务下的developement下执行runGUI，以便在工程根目录下的lib下生成相关jar。</p>
<p>执行完成后，会打开构建好的jmeter GUI界面。查看lib目录，jar包也已复制完成。在调试之前，先关闭打开的JMeter界面。</p>
<h2 id="在IDEA中debug源码"><a href="#在IDEA中debug源码" class="headerlink" title="在IDEA中debug源码"></a>在IDEA中debug源码</h2><p>下面是debug设置的操作说明：</p>
<ol>
<li><p>在IDEA中，快捷键cmd+shift+f或double shift（mac电脑），搜索找到NewDriver类。</p>
</li>
<li><p>点击小锤子旁边的 Add Configuration…</p>
</li>
<li><p>增加Application设置，在VM options中加入 -Djmeter.home=xxx（JMeter源码目录），点击ok。</p>
</li>
</ol>
<p>对于jmeter 5.4.1 ，为了debug jmeter，我是这样设置的:</p>
<ol>
<li>修改run configuration如下：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vm option：</span><br><span class="line">-Djmeter.home=/Users/lizhiqiang/Test/src/jmeter -cp .;/Users/lizhiqiang/Test/src/jmeter</span><br><span class="line"></span><br><span class="line">classname：</span><br><span class="line">org.apache.jmeter.NewDriver</span><br><span class="line"></span><br><span class="line">environment variables:</span><br><span class="line">JMETER_HOME=/Users/lizhiqiang/Test/src/jmeter</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>生成lib下相关jar（<strong>如果之前已经执行过runGUI，不需要再执行</strong>）</p>
</li>
<li><p>修改代码</p>
</li>
</ol>
<p>因为代码逻辑设定，所以为了启动debug，需要修改少量代码。如果不修改代码，debug的时候会报错。因此在line 87行添加一行：<code>tmpDir = null; //lizhiqiang debug</code>。（可能是我的野路子）。记得这行代码在正式发布的时候去除或注释掉！</p>
<p>修改后这段代码是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">tmpDir = <span class="keyword">null</span>; <span class="comment">//lizhiqiang debug</span></span><br><span class="line"><span class="keyword">if</span> (tmpDir == <span class="keyword">null</span>) &#123;</span><br><span class="line">    tmpDir = System.getenv(<span class="string">&quot;JMETER_HOME&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，程序将使用环境变量JMETER_HOME定义的目录.</p>
<ol start="4">
<li>点击debug按钮，运行代码，随后会启动JMeter的GUI了，接下来我们就可以在想了解功能上，打断点或者修改源码，调试JMeter。</li>
</ol>
<h2 id="debug时相关错误"><a href="#debug时相关错误" class="headerlink" title="debug时相关错误"></a>debug时相关错误</h2><p>尝试使用过下面的命令，但可能都不是正确的方式，因为后面尝试了都不能将jmeter启动起来，最终还是按照之前提过的方法，不实用ali的仓库进行构建。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">检查校验和：构建完成后才检查校验和</span></span><br><span class="line">./gradlew clean build -Djava.awt.headless=true -PchecksumFailOn=build_finish</span><br><span class="line">-PchecksumFailOn=build_finish</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">不检查校验和，也不测试</span></span><br><span class="line">./gradlew clean build -Djava.awt.headless=true -PchecksumIgnore -x test</span><br></pre></td></tr></table></figure>

<p>下面是默认执行<code>gradle build</code>时出现的错误。这些校验和相关的错误要解决，否则可能后面还是不能运行成功。解决的方法在前面提过，就是不要使用ali的仓库（至少在我的实践看来是这样的。原因可能还是因为某些依赖的包不再ali的仓库里）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">错误信息：</span><br><span class="line">Checksum/PGP violations detected on resolving configuration :src:testkit-wiremock:compileClasspath</span><br><span class="line">  No PGP signature (.asc file) found for artifact:</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>下面的错误不记得是如何消除的了，但比较确定的一点是，没有checksum相关的错误后，下面的错误也没了：</p>
<ul>
<li>jmeter Caused by: java.io.FileNotFoundException:   subprojects/configuration-cache/src/main/kotlin (Is a directory)</li>
<li>其他一些错误：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Create separate module per source set</span><br><span class="line">Task :src:components:autostyleJavaCheck FAILED</span><br><span class="line">src:bshclient:autostyleJavaCheck FAILED</span><br><span class="line"> Task :src:testkit-wiremock:compileJava FAILED</span><br><span class="line">java/org/apache/jorphan/gui/DynamicStyle.java使用了未经检查或不安全的操作</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>构建文档：</p>
<ul>
<li><a href="https://github.com/apache/jmeter/blob/master/gradle.md">https://github.com/apache/jmeter/blob/master/gradle.md</a> 官方构建说明，可以找到关于不同构建命令的说明</li>
</ul>
]]></content>
      <categories>
        <category>jmeter</category>
      </categories>
      <tags>
        <tag>jmeter</tag>
        <tag>debug</tag>
      </tags>
  </entry>
  <entry>
    <title>使用pyecharts绘制系统依赖关系图</title>
    <url>/2021/09/05/%E4%BD%BF%E7%94%A8pyecharts%E7%BB%98%E5%88%B6%E7%B3%BB%E7%BB%9F%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB%E5%9B%BE/</url>
    <content><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>近期梳理了公司内部系统之间的数据关系，得到了多个excel格式的统计文件，每个文件包含了该系统自身数据清单、依赖的其他系统的数据清单、对其他系统供应的数据清单。<br>各系统之间依赖关系复杂，所以我想使用一些绘图工具，以可视化图形图表的形式展现这些系统之间的数据关系，给观众形成一种非常直观的印象。</p>
<p>一般情况下，应该是有类似于调用链跟踪等工具，比如Java技术栈使用Skywalking或美团CAT等工具，做到调用级别上的跟踪和相互关系的可视化展示。<br>这种情况下，也许不需要再编写程序来绘制依赖关系了。这两种工具可以很详细的绘制组件或服务之间的调用关系。</p>
<p>不过，本文介绍如何绘制粒度稍微粗一些的关系图，没有细化到具体某个接口调用。主要的工具是pyecharts，百度开源的工具包。在绘制的时候，只使用了依赖表和对外供应两张表。</p>
<h2 id="可视化思路"><a href="#可视化思路" class="headerlink" title="可视化思路"></a>可视化思路</h2><p>可视化的方式有很多种，我的需求是以最小成本，最快速度把这个可视化效果达成。不管是使用类似思维导图或draw.io这种工具，或者是编码实现，只要可以实现，任何方式都可以考虑。</p>
<p>我考虑的第一种方式，是使用draw.io。它确实提供了很多模型，但是最终我发现，手动去绘图，会花很多时间，然后效果还一般。<br>大概花了总共2小时的时间，发现用draw.io来绘制十多个系统之间复杂的连接，还是有点难。</p>
<p>所以，我考虑第二种方式是使用思维导图。确实思维导图很快可以把图建立起来，因为执行一次<code>回车</code>操作就可以生成一个方框，速度非常快。但是我嫌这个图不好看。<br>还没等我完成全部的系统和系统之间的连线，我就不想再做下去了。</p>
<p>最后，我决定使用编码的方式实现。这样的好处有两点：第一是生成的图形会很好看，效果好，第二是后续的维护会自动化，一劳永逸。</p>
<h2 id="实现可视化"><a href="#实现可视化" class="headerlink" title="实现可视化"></a>实现可视化</h2><p>经过调研了几个框架，包括pyecharts，politly，最终我发现pyecharts的关系图其实可以实现我的想法。</p>
<p>我基于<a href="https://gallery.pyecharts.org/#/Graph/graph_les_miserables">https://gallery.pyecharts.org/#/Graph/graph_les_miserables</a>这个案例实现了想要的效果。</p>
<p>效果图如下，使用菱形图表示系统，圆形便是系统的数据：<br><img src="/images/result1.png" alt="效果图"></p>
<h2 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h2><p>相关的代码或文件分三部分，第一部分是包含系统关系的原始文件，放在files_excel目录下，第二部分是用于生成表示图形信息的json文件的python脚本<code>build_json_system_relation.py</code>，第三部分是绘制图形的代码文件<code>generate_relations.py</code>。</p>
<h3 id="数据关系文件"><a href="#数据关系文件" class="headerlink" title="数据关系文件"></a>数据关系文件</h3><p>files_excel目录下的文件，每个文件包含两个sheet（表单），即<code>对外供应数据表清单</code>和<code>所依赖外部系统数据表清单</code>。</p>
<p><code>对外供应数据表清单</code>表单的格式如下：</p>
<table>
<thead>
<tr>
<th align="center">目的系统</th>
<th align="center">数据英文名</th>
<th align="center">数据中文名</th>
<th align="center">数据交换方式</th>
</tr>
</thead>
<tbody><tr>
<td align="center">B</td>
<td align="center">table1</td>
<td align="center">数据1</td>
<td align="center">交易线</td>
</tr>
<tr>
<td align="center">C</td>
<td align="center">table2</td>
<td align="center">数据2</td>
<td align="center">数据线</td>
</tr>
<tr>
<td align="center">D</td>
<td align="center">table3</td>
<td align="center">数据3</td>
<td align="center">数据线</td>
</tr>
</tbody></table>
<p><code>所依赖外部系统数据表清单</code>表单的格式与上面类似，不过第一列是源系统。</p>
<p>上述两个文件就是我们要使用到的系统数据关系文件。如果有工具可以产生上述文件，那所有的步骤都可以自动化完成，包括生成本文讲的这种简单的关系图。如果不能自动生成，那么可能需要人工维护。所以建议还是都能实现自动化。关于如何产生上述关系，不在本文范围内，不过我觉得这种关系在任何一家公司都会维护起来的，比如通过提供一个维护页面维护上述两张表。</p>
<h3 id="生成表示图形中节点和边的JSON文件"><a href="#生成表示图形中节点和边的JSON文件" class="headerlink" title="生成表示图形中节点和边的JSON文件"></a>生成表示图形中节点和边的JSON文件</h3><p>现在我们已经有了原始关系文件，这种文件一般是for人类的，就是说给人看和维护的。那么现在我们需要把它们转成给代码使用的json文件。</p>
<p>json文件格式大致如下，可以先了解一下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;categories&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;data node&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;symbol&quot;</span>: <span class="string">&quot;circle&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;system node&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;symbol&quot;</span>: <span class="string">&quot;diamond&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;nodes&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;SYSTEM_A&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;SYSTEM_A&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;category&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;SYSTEM_B&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;SYSTEM_B&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;category&quot;</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;SYSTEM_C&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;SYSTEM_C&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;category&quot;</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;SYSTEM_A#table1&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;SYSTEM_A#table1&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;category&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;edges&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;sourceID&quot;</span>: <span class="string">&quot;SYSTEM_A#table1&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;attributes&quot;</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">&quot;targetID&quot;</span>: <span class="string">&quot;SYSTEM_B&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;size&quot;</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;sourceID&quot;</span>: <span class="string">&quot;SYSTEM_A#table1&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;attributes&quot;</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">&quot;targetID&quot;</span>: <span class="string">&quot;SYSTEM_C&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;size&quot;</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述文件包含了三部分，第一份是<code>categories</code>，表示分类，可以将节点进行分类，方便区分；第二部分是<code>nodes</code>，表示图中所有节点，第三部分是<code>edges</code>表示图中所有边。</p>
<p>生成上述JSON文件的大概思路或算法是这样的：使用pandas读取excel表的数据，第一列（源或目的系统）作为系统节点，而第三列也就是数据列作为数据节点，对应JSON文件中的<code>nodes</code>中的每个元素。每一行都是一个关系，作为一条边，源节点是数据节点，目的节点是系统节点，对应JSON文件中的<code>edges</code>中的每个元素。通过遍历所有excel文件中的两个表单的每一行（非空），建立节点、边的信息，形成一个大的JSON文件。</p>
<p>关键代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_node_data</span>(<span class="params">data_dir</span>):</span></span><br><span class="line">    all_node_data = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(data_dir):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="comment"># get node data</span></span><br><span class="line">            filepath = os.path.join(root, file)</span><br><span class="line">            all_node_data.extend(read_data_from_excel(filepath))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> all_node_data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_data_from_excel</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;从excel读取数据，数据项作为一个节点（信息类）&quot;&quot;&quot;</span></span><br><span class="line">    out = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 系统节点</span></span><br><span class="line">    system_name = get_system_name(filename)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取&quot;对外供应数据表清单&quot;</span></span><br><span class="line">    <span class="comment"># 目的系统名称 表英文名 表中文名称 数据供应方式（交易线，数据线）</span></span><br><span class="line">    data = pd.read_excel(filename, sheet_name=<span class="string">&quot;对外供应数据表清单&quot;</span>, engine=<span class="string">&quot;openpyxl&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        row = data.iloc[i]</span><br><span class="line">        info_name = system_name + <span class="string">&quot;#&quot;</span> + trim_node_name(row[<span class="number">2</span>])  <span class="comment"># 类似 A#财务数据 这种格式</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理以/分隔的多个系统</span></span><br><span class="line">        system_target_list = []</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;/&quot;</span> <span class="keyword">in</span> row[<span class="number">0</span>]:</span><br><span class="line">            systems = <span class="built_in">str</span>.split(row[<span class="number">0</span>], <span class="string">&quot;/&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span> system <span class="keyword">in</span> systems:</span><br><span class="line">                system_target = get_system_name(system)</span><br><span class="line">                <span class="keyword">if</span> system_target <span class="keyword">not</span> <span class="keyword">in</span> SYSTEM_IGNORE:</span><br><span class="line">                    system_target_list.append(system_target)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            system_target = get_system_name(row[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">if</span> system_target <span class="keyword">not</span> <span class="keyword">in</span> SYSTEM_IGNORE:</span><br><span class="line">                system_target_list.append(system_target)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> system_target <span class="keyword">in</span> system_target_list:</span><br><span class="line">            tmp_node = copy.deepcopy(generate_node_data(info_name, system_target, row[<span class="number">1</span>], row[<span class="number">2</span>], row[<span class="number">3</span>]))</span><br><span class="line">            out.append(tmp_node)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取&quot;所依赖外部系统数据表清单&quot;</span></span><br><span class="line">    <span class="comment"># 目的系统名称 表英文名 表中文名 数据供应方式（交易线，数据线）</span></span><br><span class="line">    data2 = pd.read_excel(filename, sheet_name=<span class="string">&quot;所依赖外部系统数据表清单&quot;</span>, engine=<span class="string">&quot;openpyxl&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data2)):</span><br><span class="line">        row = data2.iloc[i]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理以/分隔的多个系统</span></span><br><span class="line">        system_src_list = []</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;/&quot;</span> <span class="keyword">in</span> row[<span class="number">0</span>]:</span><br><span class="line">            systems_src = <span class="built_in">str</span>.split(row[<span class="number">0</span>], <span class="string">&quot;/&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span> system <span class="keyword">in</span> systems_src:</span><br><span class="line">                system_src_list.append(system)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            system_src_list.append(row[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        system_target = system_name</span><br><span class="line">        <span class="keyword">for</span> system <span class="keyword">in</span> system_src_list:</span><br><span class="line">            system_name_src = get_system_name(system)</span><br><span class="line">            <span class="keyword">if</span> system_name_src <span class="keyword">not</span> <span class="keyword">in</span> SYSTEM_IGNORE:</span><br><span class="line">                info_name = system_name_src + <span class="string">&quot;#&quot;</span> + trim_node_name(row[<span class="number">2</span>])</span><br><span class="line">                tmp_node = copy.deepcopy(generate_node_data(info_name, system_target, row[<span class="number">1</span>], row[<span class="number">2</span>], row[<span class="number">3</span>]))</span><br><span class="line">                out.append(tmp_node)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="使用pyecharts绘制图形"><a href="#使用pyecharts绘制图形" class="headerlink" title="使用pyecharts绘制图形"></a>使用pyecharts绘制图形</h3><p>现在已经有JSON文件了，工作完成了大部分。接下来就是编写代码绘制关系图，生成一个html文件。这个html文件是可交互的，可以移动鼠标或缩放。如果未来在这个页面增加其他一些检索或表格生成功能就更好了。可以作为未来继续尝试的点。这块没有什么算法逻辑。</p>
<p>关键代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">json_file = <span class="string">&quot;all_node_data.json&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(json_file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data_local = f.read()</span><br><span class="line">    data = json.loads(data_local)</span><br><span class="line"></span><br><span class="line">nodes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"># &quot;x&quot;: node[&quot;x&quot;],</span></span><br><span class="line">        <span class="comment"># &quot;y&quot;: node[&quot;y&quot;],</span></span><br><span class="line">        <span class="string">&quot;id&quot;</span>: node[<span class="string">&quot;id&quot;</span>],</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: node[<span class="string">&quot;label&quot;</span>],</span><br><span class="line">        <span class="string">&quot;symbolSize&quot;</span>: node[<span class="string">&quot;size&quot;</span>],</span><br><span class="line">        <span class="string">&quot;symbol&quot;</span>: node[<span class="string">&quot;symbol&quot;</span>],</span><br><span class="line">        <span class="comment"># &quot;itemStyle&quot;: &#123;&quot;normal&quot;: &#123;&quot;color&quot;: node[&quot;color&quot;]&#125;&#125;,</span></span><br><span class="line">        <span class="string">&quot;category&quot;</span>: node[<span class="string">&quot;category&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> data[<span class="string">&quot;nodes&quot;</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">edges = [</span><br><span class="line">    &#123;<span class="string">&quot;source&quot;</span>: edge[<span class="string">&quot;sourceID&quot;</span>], <span class="string">&quot;target&quot;</span>: edge[<span class="string">&quot;targetID&quot;</span>], <span class="string">&quot;value&quot;</span>: edge[<span class="string">&quot;value&quot;</span>],</span><br><span class="line">     <span class="string">&quot;linestyle_opts&quot;</span>: opts.LineStyleOpts(type_=edge[<span class="string">&quot;type_&quot;</span>]),</span><br><span class="line">     &#125; <span class="keyword">for</span></span><br><span class="line">    edge <span class="keyword">in</span> data[<span class="string">&quot;edges&quot;</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">categories = data[<span class="string">&quot;categories&quot;</span>]</span><br><span class="line"></span><br><span class="line">(</span><br><span class="line">    Graph(init_opts=opts.InitOpts(width=<span class="string">&quot;1600px&quot;</span>, height=<span class="string">&quot;1200px&quot;</span>))</span><br><span class="line">        .add(</span><br><span class="line">        series_name=<span class="string">&quot;&quot;</span>,</span><br><span class="line">        nodes=nodes,</span><br><span class="line">        links=edges,</span><br><span class="line">        categories=categories,</span><br><span class="line">        layout=<span class="string">&quot;circular&quot;</span>,  <span class="comment"># circular , force, none</span></span><br><span class="line">        is_roam=<span class="literal">True</span>,</span><br><span class="line">        is_focusnode=<span class="literal">True</span>,</span><br><span class="line">        repulsion=<span class="number">100</span>,</span><br><span class="line">        is_rotate_label=<span class="literal">True</span>,</span><br><span class="line">        label_opts=opts.LabelOpts(is_show=<span class="literal">True</span>, position=<span class="string">&quot;right&quot;</span>),</span><br><span class="line">        linestyle_opts=opts.LineStyleOpts(width=<span class="number">1</span>, curve=<span class="number">0.3</span>, opacity=<span class="number">1.0</span>),  <span class="comment"># type_=&quot;solid&quot;</span></span><br><span class="line">        edge_symbol=[<span class="string">&quot;&quot;</span>, <span class="string">&quot;arrow&quot;</span>],  <span class="comment"># 单向箭头</span></span><br><span class="line">        edge_label=opts.LabelOpts(</span><br><span class="line">            is_show=<span class="literal">False</span>, position=<span class="string">&quot;middle&quot;</span>, formatter=<span class="string">&quot;&#123;b&#125;: &#123;c&#125; &quot;</span>  <span class="comment"># 设置关系说明</span></span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">        .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;系统数据关系图&quot;</span>),</span><br><span class="line">                         legend_opts=opts.LegendOpts(orient=<span class="string">&quot;vertical&quot;</span>, pos_left=<span class="string">&quot;2%&quot;</span>, pos_top=<span class="string">&quot;20%&quot;</span>), )</span><br><span class="line">        .render(<span class="string">&quot;relations-systems.html&quot;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>代码地址：<a href="https://gitee.com/zackli518/charts_system_relations/tree/master">https://gitee.com/zackli518/charts_system_relations/tree/master</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>参考：</p>
<ul>
<li><a href="https://cloud.tencent.com/developer/article/1741359">https://cloud.tencent.com/developer/article/1741359</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/358471558">https://zhuanlan.zhihu.com/p/358471558</a> 了解了比较多类的属性</li>
<li><a href="https://gallery.pyecharts.org/#/Graph/graph_les_miserables">https://gallery.pyecharts.org/#/Graph/graph_les_miserables</a> 官方文档说明，案例比较丰富</li>
<li><a href="https://github.com/pyecharts/pyecharts-gallery">https://github.com/pyecharts/pyecharts-gallery</a> pyecharts的github地址</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>pyecharts</tag>
        <tag>python</tag>
        <tag>可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>使用JMeter5测试PostgreSQL数据库</title>
    <url>/2021/08/29/%E4%BD%BF%E7%94%A8JMeter5%E6%B5%8B%E8%AF%95PostgreSQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p>在本节中，我们使用“JDBC请求”取样器组件来测试PostgreSQL数据库服务器。其他需使用的组件包括 线程组、 JDBC请求、摘要报告。对于MySQL或其他可以通过JDBC驱动连接的数据库，方法是类似的。</p>
<h2 id="准备测试环境"><a href="#准备测试环境" class="headerlink" title="准备测试环境"></a>准备测试环境</h2><p>本示例中JMeter与PostgreSQL运行在同一台机器，使用Java 11，PostgreSQL版本是13.4。</p>
<p>（1）准备数据库</p>
<p>首先需要安装PostgreSQL数据库（后面简称PG），请参考官方安装说明[ pg下载地址：<a href="https://www.postgresql.org/download/">https://www.postgresql.org/download/</a> ]，选择相符的操作系统，下载和安装PG。完成安装后，我们在PostgreSQL中创建数据库，并在该库下创建数据表以及创建相关用户。</p>
<p>本示例中创建数据库为“exampledb”，表名称为“user_tbl”。下表为相关sql命令。</p>
<p>代码片段 0-1 在PostgreSQL数据库上创建用户和数据表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#使用postgres用户在pg命令行上执行下述命令</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> dbuser2 <span class="keyword">WITH</span> PASSWORD <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE test OWNER dbuser ENCODING utf8;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> DATABASE test <span class="keyword">to</span> dbuser;</span><br><span class="line">#然后使用新创建的用户dbuser登录pg后执行下述命令插入记录</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> user_tbl(name <span class="type">VARCHAR</span>(<span class="number">20</span>), signup_date <span class="type">DATE</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_tbl(name, signup_date) <span class="keyword">VALUES</span>(<span class="string">&#x27;john&#x27;</span>, <span class="string">&#x27;2020-10-01&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>（2）安装数据库驱动</p>
<p>JMeter需要通过数据库驱动程序连接PostgreSQL数据库服务器，因此要将相关驱动文件复制到 JMeter安装目录下的 ./lib目录，并重启JMeter。JMeter从lib和lib/ext目录加载jar，更多详细信息请参阅JMeter的类路径。我们使用postgresql-42.2.23.jar[ 下载地址：<a href="https://jdbc.postgresql.org/download.html">https://jdbc.postgresql.org/download.html</a> ]作为访问PostgreSQL数据库的驱动持续。</p>
<h2 id="添加JDBC请求组件"><a href="#添加JDBC请求组件" class="headerlink" title="添加JDBC请求组件"></a>添加JDBC请求组件</h2><p>此处略过如何添加线程组以及设置用户数，参考之前的操作步骤即可。现在我们要在测试计划中添加执行JDBC Request的JMeter组件，即“JDBC请求”取样器。<br>首先需要配置JDBC连接属性。选择“线程组”，单击鼠标右键，然后选择 添加  →  配置元件 →  JDBC Connection Configuration 。配置该元件属性，如下图所示。</p>
<p>图 3-5-2-1 jdbc connection设置<br><img src="/images/jmeter5/jdbc/jdbc%20connection.png" alt="jdbc connection"></p>
<p>需要设置的字段包括：</p>
<ul>
<li>连接池变量名称（Variable name for created pool）：JDBC取样器使用它来识别相关配置，可以是任何字符串。本示例设为postgresql。</li>
<li>数据库地址（Database URL）：jdbc:postgresql://localhost/exampledb</li>
<li>JDBC 驱动类（JDBC Driver class）：org.postgresql.Driver</li>
<li>用户名（Username）：数据库的用户名。本示例中，此处为dbuser2。</li>
<li>密码（Password）：用户名的密码。本示例中，用户dbuser2的密码是password。</li>
<li>其他字段可以使用默认值。</li>
<li>Validation query字段：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Validation Query：这个有好多资料里都没说到，validationQuery must be an SQL SELECT statement, that returns at least one row。不同的数据库，所选择的Validation Query是不同的，经过外国友人的测试，具体可参照以下（postgresql选select 1）：</span><br><span class="line">hsqldb - select 1 from INFORMATION_SCHEMA.SYSTEM_USERS</span><br><span class="line">Oracle - select 1 from dual</span><br><span class="line">DB2 - select 1 from sysibm.sysdummy1</span><br><span class="line">mysql - select 1</span><br><span class="line">microsoft SQL Server - select 1 (tested on SQL-Server 9.0, 10.5 [2008])</span><br><span class="line">postgresql - select 1</span><br><span class="line">ingres - select 1</span><br><span class="line">derby - values 1</span><br><span class="line">H2 - select 1</span><br><span class="line">Firebird - select 1 from rdb$database</span><br></pre></td></tr></table></figure>

<p>接着，添加JDBC请求取样器。再次选择 JDBC 用户元素，单击鼠标右键，在弹出菜单选择 添加  →  取样器  →  JDBC Request 。然后，左键选择这个新元素并修改相关配置。</p>
<p>在我们的测试计划中，包括三个 JDBC Request取样器。第一个取样器向PostgreSQL数据库增加一行记录，第二个取样器查询记录，第三取样器清理第一个取样器插入的记录。JMeter 将按顺序将请求发送到服务器。具体配置如下。</p>
<p>图 0-1 第一个JDBC请求取样器即执行增加记录操作的取样器:<br><img src="/images/jmeter5/jdbc/jdbc%20insert.png" alt="jdbc connection"></p>
<p>上述为第一个请求配置面板，属性按如下设置编辑：</p>
<ul>
<li>将名称更改为“jdbc add”。</li>
<li>连接池变量名称：“ postgresql”（与JDBC Connection Configuration即JDBC连接配置中的相同）</li>
<li>设置查询类型（Query Type）为“Update Statement”</li>
<li>SQL 查询字符串</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_tbl(name, signup_date) <span class="keyword">VALUES</span>(<span class="string">&#x27;mike&#x27;</span>, <span class="string">&#x27;2020-10-01&#x27;</span>);</span><br><span class="line"><span class="comment">--其中查询字符串中可以使用JMeter变量或?，如：</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_tbl(name, signup_date) <span class="keyword">VALUES</span>(<span class="string">&#x27;$&#123;name&#125;&#x27;</span>, <span class="string">&#x27;2020-10-01&#x27;</span>)</span><br><span class="line"><span class="comment">--其中name为用户定义的变量。</span></span><br><span class="line"><span class="comment">--或者：</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_tbl(name, signup_date) <span class="keyword">VALUES</span>(?, <span class="string">&#x27;2020-10-01&#x27;</span>)</span><br><span class="line"><span class="comment">--目前暂时不能使用占位符，比如VALUES(?)这样。</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在parameter values传入相关参数，在parameter types设置参数类型，均以逗号分隔。</li>
</ul>
<p>第二个用于查询的JDBC Request取样器如下。<br><img src="/images/jmeter5/jdbc/jdbc%20query.png" alt="jdbc add"></p>
<p>第三个JDBC Request取样器用于清理之前插入的数据，配置如下。<br><img src="/images/jmeter5/jdbc/jdbc%20delete.png" alt="jdbc add"></p>
<h3 id="执行和查看结果"><a href="#执行和查看结果" class="headerlink" title="执行和查看结果"></a>执行和查看结果</h3><p>在执行测试时，JMeter 使用控制面板中指定的配置创建数据库连接池。该连接池在 “JDBC Request ”中的“Variable Name of Pool declared in JDBC Connection Configuration”字段中引用。可以使用多个不同的 JDBC 配置元素，但它们必须具有唯一的名称，否则定义在后面配置将覆盖前面定义的配置。每个 JDBC Request都必须引用一个 JDBC 配置池，多个 JDBC Request可以引用同一个池。</p>
<p>在计划中，可以添加监听器来查看/存储测试结果。</p>
]]></content>
      <categories>
        <category>jmeter</category>
      </categories>
      <tags>
        <tag>JMeter</tag>
        <tag>JMeter5</tag>
        <tag>JDBC</tag>
        <tag>Database</tag>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/08/26/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<span id="more"></span>

<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>helloworld</category>
      </categories>
      <tags>
        <tag>helloworld</tag>
      </tags>
  </entry>
</search>
